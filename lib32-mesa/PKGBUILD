# Maintainer: Laurent Carlier <lordheavym@gmail.com>
# Maintainer: Felix Yan <felixonmars@archlinux.org>
# Contributor: Jan de Groot <jgc@archlinux.org>
# Contributor: Andreas Radke <andyrtr@archlinux.org>

pkgbase=lib32-mesa
pkgname=(
  'lib32-vulkan-mesa-layers'
  'lib32-opencl-clover-mesa'
  'lib32-opencl-rusticl-mesa'
  'lib32-vulkan-intel'
  'lib32-vulkan-radeon'
  'lib32-vulkan-swrast'
  'lib32-vulkan-virtio'
  'lib32-libva-mesa-driver'
  'lib32-mesa-vdpau'
  'lib32-mesa'
)
_mesaver=23.3.3
pkgver=${_mesaver//-/.}.chos2
pkgrel=1
epoch=1
pkgdesc="An open-source implementation of the OpenGL specification (32-bit)"
url="https://www.mesa3d.org/"
arch=('x86_64')
license=('custom')
makedepends=(
  'lib32-clang'
  'lib32-expat'
  'lib32-libdrm'
  'lib32-libelf'
  'lib32-libglvnd'
  'lib32-libunwind'
  'lib32-libva'
  'lib32-libvdpau'
  'lib32-libx11'
  'lib32-libxdamage'
  'lib32-libxml2'
  'lib32-libxrandr'
  'lib32-libxshmfence'
  'lib32-libxxf86vm'
  'lib32-llvm'
  'lib32-lm_sensors'
  'lib32-rust-libs'
  'lib32-spirv-llvm-translator'
  'lib32-spirv-tools'
  'lib32-systemd'
  'lib32-vulkan-icd-loader'
  'lib32-wayland'
  'lib32-zstd'

  # shared between mesa and lib32-mesa
  'clang'
  'cmake'
  'elfutils'
  'glslang'
  'libclc'
  'meson'
  'python-mako'
  'python-ply'
  'rust-bindgen'
  'wayland-protocols'
  'xorgproto'

)
source=(
  https://mesa.freedesktop.org/archive/mesa-${_mesaver}.tar.xz{,.sig}
  LICENSE
  0001-radv-Enable-compute-dispatch-tunneling.patch
  0002-vulkan-wsi-wayland-refactor-wayland-dispatch-code.patch
  0003-vulkan-wsi-wayland-Use-commit_timing-commit_queue-pr.patch
  0004-hack-rip-out-commit-timing-v1.patch
  0005-wsi-Use-vendored-gamescope-commit-queue-v1-protocol.patch
  0006-STEAMOS-Dynamic-swapchain-override-for-gamescope-lim.patch
)
sha256sums=('518307c0057fa3cee8b58df78be431d4df5aafa7edc60d09278b2d7a0a80f3b4'
            'SKIP'
            '7052ba73bb07ea78873a2431ee4e828f4e72bda7d176d07f770fa48373dec537'
            '59951fd6a77eb63e2fde4470fa93d0413862a3d3de943def327214be0498f499'
            '97fc2fddd9afbc91e4dde5be3c1ddcbbcc433ae0d57b2c952c5ac73a372f52c3'
            '21ff1a220c8741891fee77c766f6688da518c2ee0a9039b4d7310cef35b644ed'
            'b0f51fc9cbd68850a73b858619e3fc4147e75484b80e98f9c854c246864ba68c'
            '621a6da07df923d84a89633c122c037f46f579cda6e3c779678c5e85f5c1b272'
            '40172839bad90eae4be3a94c0e826e7ac9dd6e6bf6b44e266ef603cf02edf1bf')
b2sums=('6b57e99356abccf398c5fb84953fc1490ddf516dbeed1feca8d16344a04c1c15183325752717447a34a61dd4cdda897147e3194f869d8dbadfa5c45a0c95dab5'
        'SKIP'
        '1ecf007b82260710a7bf5048f47dd5d600c168824c02c595af654632326536a6527fbe0738670ee7b921dd85a70425108e0f471ba85a8e1ca47d294ad74b4adb'
        '5a6b6ba26692f4cd3cbec42597e35accde45cae99690017ec2f9ac8ce75ae9cc7a812179cd2e68c0fb324568e5f8ee1fff4d718f109ea655cec6ad67abc203ac'
        'e6c37a0c0ba91b2dd4c7242c945166b5cb56834c846ab68598e198e31c9b80db0de70121e6452ed9bbd841e25eb59845c30557d2ac60021c070bc1f7fd0dd6ea'
        'bd51d6af44e913ce225c26920418e1ff1768876a916fea94954958eb18375e48aa9f01ef4a486f26c75b7d6ab4b7b83059885acd3ec6867c6b15764436bd919b'
        'd48a86ac7470fba6b71f4d523a4a909dc550456dec4bb60b0e81be99c437355339ec5b9bca39a5ef5ec1d3a6956f56e24111befa5955682b88bf570f388f415c'
        'b153e21177d4b4a3fb31df7e0adda3a499234884fada8f85e8346439429123499050efa347809745474aac9b1043fb14539404dbebe7f81cb46d14d332fcdfc5'
        'acd1fa5cdded4726a84c4d777a04309f71444237e175f66a2bd2cb2a1a45a298b68fa15f385769425b577fb0d0468b81d3ecd90d024940e41d9ceb76adbe388d')
validpgpkeys=('8703B6700E7EE06D7A39B8D6EDAE37B02CEB490D'  # Emil Velikov <emil.l.velikov@gmail.com>
              '946D09B5E4C9845E63075FF1D961C596A7203456'  # Andres Gomez <tanty@igalia.com>
              'E3E8F480C52ADD73B278EE78E1ECBE07D7D70895'  # Juan Antonio Su√°rez Romero (Igalia, S.L.) <jasuarez@igalia.com>
              'A5CC9FEC93F2F837CB044912336909B6B25FADFA'  # Juan A. Suarez Romero <jasuarez@igalia.com>
              '71C4B75620BC75708B4BDB254C95FAAB3EB073EC'  # Dylan Baker <dylan@pnwbakers.com>
              '57551DE15B968F6341C248F68D8E31AFC32428A6') # Eric Engestrom <eric@engestrom.ch>

prepare() {
  cd mesa-$_mesaver

  local src
  for src in "${source[@]}"; do
    src="${src%%::*}"
    src="${src##*/}"
    [[ $src = *.patch ]] || continue
    echo "Applying patch $src..."
    patch -Np1 < "../$src"
  done

  # Include package release in version string so Chromium invalidates
  # its GPU cache; otherwise it can cause pages to render incorrectly.
  # https://bugs.launchpad.net/ubuntu/+source/chromium-browser/+bug/2020604
  echo "$pkgver-$epoch.$pkgrel" >VERSION
}

build() {
  local meson_options=(
    --cross-file lib32
    -D android-libbacktrace=disabled
    -D b_ndebug=true
    -D dri3=enabled
    -D egl=enabled
    -D gallium-drivers=r300,r600,radeonsi,nouveau,virgl,svga,swrast,i915,iris,crocus,zink
    -D gallium-extra-hud=true
    -D gallium-nine=true
    -D gallium-omx=disabled
    -D gallium-opencl=icd
    -D gallium-rusticl=true
    -D gallium-va=enabled
    -D gallium-vdpau=enabled
    -D gallium-xa=enabled
    -D gbm=enabled
    -D gles1=disabled
    -D gles2=enabled
    -D glvnd=true
    -D glx=dri
    -D intel-clc=enabled
    -D libunwind=enabled
    -D llvm=enabled
    -D lmsensors=enabled
    -D microsoft-clc=disabled
    -D osmesa=true
    -D platforms=x11,wayland
    -D rust_std=2021
    -D shared-glapi=enabled
    -D valgrind=disabled
    -D video-codecs=vc1dec,h264dec,h264enc,h265dec,h265enc
    -D vulkan-drivers=amd,intel,intel_hasvk,swrast,virtio
    -D vulkan-layers=device-select,intel-nullhw,overlay
  )

  # Build only minimal debug info to reduce size
  CFLAGS+=' -g1'
  CXXFLAGS+=' -g1'

  export BINDGEN_EXTRA_CLANG_ARGS="-m32"

  arch-meson mesa-$_mesaver build "${meson_options[@]}"
  meson configure build # Print config

  meson compile -C build

  # fake installation to be seperated into packages
  # outside of fakeroot but mesa doesn't need to chown/mod
  DESTDIR="${srcdir}/fakeinstall" meson install -C build
}

_install() {
  local src f dir
  for src; do
    f="${src#fakeinstall/}"
    dir="${pkgdir}/${f%/*}"
    install -m755 -d "${dir}"
    mv -v "${src}" "${dir}/"
  done
}

_libdir=usr/lib32

package_lib32-vulkan-mesa-layers() {
  pkgdesc="Mesa's Vulkan layers (32-bit)"
  depends=(
    'lib32-libdrm'
    'lib32-libxcb'
    'lib32-wayland'

    'vulkan-mesa-layers'
  )
  conflicts=('lib32-vulkan-mesa-layer')
  replaces=('lib32-vulkan-mesa-layer')

  rm -rv fakeinstall/usr/share/vulkan/explicit_layer.d
  rm -rv fakeinstall/usr/share/vulkan/implicit_layer.d
  _install fakeinstall/$_libdir/libVkLayer_*.so
  rm -v fakeinstall/usr/bin/mesa-overlay-control.py

  install -m644 -Dt "${pkgdir}/usr/share/licenses/${pkgname}" LICENSE
}

package_lib32-opencl-clover-mesa() {
  pkgdesc="OpenCL support with clover for mesa drivers (32-bit)"
  depends=(
    'lib32-clang'
    'lib32-expat'
    'lib32-libdrm'
    'lib32-libelf'
    'lib32-spirv-llvm-translator'
    'lib32-zstd'

    'libclc'
    'opencl-clover-mesa'
  )
  optdepends=('opencl-headers: headers necessary for OpenCL development')
  provides=('lib32-opencl-driver')
  replaces=("lib32-opencl-mesa<=23.1.4-1")
  conflicts=('lib32-opencl-mesa')

  rm -v fakeinstall/etc/OpenCL/vendors/mesa.icd
  _install fakeinstall/$_libdir/libMesaOpenCL*
  _install fakeinstall/$_libdir/gallium-pipe

  install -m644 -Dt "${pkgdir}/usr/share/licenses/${pkgname}" LICENSE
}

package_lib32-opencl-rusticl-mesa() {
  pkgdesc="OpenCL support with rusticl for mesa drivers (32-bit)"
  depends=(
    'lib32-clang'
    'lib32-expat'
    'lib32-libdrm'
    'lib32-libelf'
    'lib32-lm_sensors'
    'lib32-spirv-llvm-translator'
    'lib32-zstd'

    'libclc'
    'opencl-rusticl-mesa'
  )
  optdepends=('opencl-headers: headers necessary for OpenCL development')
  provides=('lib32-opencl-driver')
  replaces=("lib32-opencl-mesa<=23.1.4-1")
  conflicts=('lib32-opencl-mesa')

  rm -v fakeinstall/etc/OpenCL/vendors/rusticl.icd
  _install fakeinstall/$_libdir/libRusticlOpenCL*

  install -m644 -Dt "${pkgdir}/usr/share/licenses/${pkgname}" LICENSE
}

package_lib32-vulkan-intel() {
  pkgdesc="Intel's Vulkan mesa driver (32-bit)"
  depends=(
    'lib32-libdrm'
    'lib32-libx11'
    'lib32-libxshmfence'
    'lib32-systemd'
    'lib32-wayland'
    'lib32-xcb-util-keysyms'
    'lib32-zstd'
  )
  optdepends=('lib32-vulkan-mesa-layers: additional vulkan layers')
  provides=('lib32-vulkan-driver')

  _install fakeinstall/usr/share/vulkan/icd.d/intel_*.json
  _install fakeinstall/$_libdir/libvulkan_intel*.so

  install -m644 -Dt "${pkgdir}/usr/share/licenses/${pkgname}" LICENSE
}

package_lib32-vulkan-radeon() {
  pkgdesc="Radeon's Vulkan mesa driver (32-bit)"
  depends=(
    'lib32-libdrm'
    'lib32-libelf'
    'lib32-libx11'
    'lib32-libxshmfence'
    'lib32-llvm-libs'
    'lib32-systemd'
    'lib32-wayland'
    'lib32-xcb-util-keysyms'
    'lib32-zstd'

    'vulkan-radeon'
  )
  optdepends=('lib32-vulkan-mesa-layers: additional vulkan layers')
  provides=('lib32-vulkan-driver')

  rm -v fakeinstall/usr/share/drirc.d/00-radv-defaults.conf
  _install fakeinstall/usr/share/vulkan/icd.d/radeon_icd*.json
  _install fakeinstall/$_libdir/libvulkan_radeon.so

  install -m644 -Dt "${pkgdir}/usr/share/licenses/${pkgname}" LICENSE
}

package_lib32-vulkan-swrast() {
  pkgdesc="Vulkan software rasteriser driver (32-bit)"
  depends=(
    'lib32-libdrm'
    'lib32-libunwind'
    'lib32-libx11'
    'lib32-libxshmfence'
    'lib32-llvm-libs'
    'lib32-systemd'
    'lib32-wayland'
    'lib32-xcb-util-keysyms'
    'lib32-zstd'
  )
  optdepends=('lib32-vulkan-mesa-layers: additional vulkan layers')
  conflicts=('lib32-vulkan-mesa')
  replaces=('lib32-vulkan-mesa')
  provides=('lib32-vulkan-driver')

  _install fakeinstall/usr/share/vulkan/icd.d/lvp_icd*.json
  _install fakeinstall/$_libdir/libvulkan_lvp.so

  install -m644 -Dt "${pkgdir}/usr/share/licenses/${pkgname}" LICENSE
}

package_lib32-vulkan-virtio() {
  pkgdesc="Venus Vulkan mesa driver for Virtual Machines (32-bit)"
  depends=(
    'lib32-libdrm'
    'lib32-libx11'
    'lib32-libxshmfence'
    'lib32-systemd'
    'lib32-wayland'
    'lib32-xcb-util-keysyms'
    'lib32-zstd'
  )
  optdepends=('lib32-vulkan-mesa-layers: additional vulkan layers')
  provides=('lib32-vulkan-driver')

  _install fakeinstall/usr/share/vulkan/icd.d/virtio_icd*.json
  _install fakeinstall/$_libdir/libvulkan_virtio.so

  install -m644 -Dt "${pkgdir}/usr/share/licenses/${pkgname}" LICENSE
}

package_lib32-libva-mesa-driver() {
  pkgdesc="VA-API drivers (32-bit)"
  depends=(
    'lib32-expat'
    'lib32-libdrm'
    'lib32-libelf'
    'lib32-libx11'
    'lib32-libxshmfence'
    'lib32-llvm-libs'
    'lib32-zstd'
  )
  provides=('lib32-libva-driver')

  _install fakeinstall/$_libdir/dri/*_drv_video.so

  install -m644 -Dt "${pkgdir}/usr/share/licenses/${pkgname}" LICENSE
}

package_lib32-mesa-vdpau() {
  pkgdesc="VDPAU drivers (32-bit)"
  depends=(
    'lib32-expat'
    'lib32-libdrm'
    'lib32-libelf'
    'lib32-libx11'
    'lib32-libxshmfence'
    'lib32-llvm-libs'
    'lib32-zstd'
  )
  provides=('lib32-vdpau-driver')

  _install fakeinstall/$_libdir/vdpau

  install -m644 -Dt "${pkgdir}/usr/share/licenses/${pkgname}" LICENSE
}

package_lib32-mesa() {
  depends=(
    'lib32-libdrm'
    'lib32-libelf'
    'lib32-libglvnd'
    'lib32-libunwind'
    'lib32-libxdamage'
    'lib32-libxshmfence'
    'lib32-libxxf86vm'
    'lib32-llvm-libs'
    'lib32-lm_sensors'
    'lib32-vulkan-icd-loader'
    'lib32-wayland'
    'lib32-zstd'

    'mesa'
  )
  optdepends=(
    'opengl-man-pages: for the OpenGL API man pages'
  )
  provides=(
    'lib32-mesa-libgl'
    'lib32-opengl-driver'
  )
  conflicts=('lib32-mesa-libgl')
  replaces=('lib32-mesa-libgl')

  rm -v fakeinstall/usr/share/drirc.d/00-mesa-defaults.conf
  rm -v fakeinstall/usr/share/glvnd/egl_vendor.d/50_mesa.json

  # ati-dri, nouveau-dri, intel-dri, svga-dri, swrast, swr
  _install fakeinstall/$_libdir/dri/*_dri.so

  _install fakeinstall/$_libdir/d3d
  _install fakeinstall/$_libdir/lib{gbm,glapi}.so*
  _install fakeinstall/$_libdir/libOSMesa.so*
  _install fakeinstall/$_libdir/libxatracker.so*

  rm -rv fakeinstall/usr/include
  _install fakeinstall/$_libdir/pkgconfig

  # libglvnd support
  _install fakeinstall/$_libdir/libGLX_mesa.so*
  _install fakeinstall/$_libdir/libEGL_mesa.so*

  # indirect rendering
  ln -sr "$pkgdir"/$_libdir/libGLX_{mesa,indirect}.so.0

  # make sure there are no files left to install
  find fakeinstall -depth -print0 | xargs -0 rmdir

  install -m644 -Dt "${pkgdir}/usr/share/licenses/${pkgname}" LICENSE
}
